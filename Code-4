import numpy as np
import matplotlib.pyplot as plt

# Define simulation parameters
time_intervals = 100
protocols = ['Protocol A', 'Protocol B', 'Protocol C']
traffic_types = ['IoT Low Priority', 'IoT High Priority', 'Autonomous Vehicle']
network_conditions = np.random.rand(time_intervals, 3)  # Expanded to include variability in signal quality

# Initialize results storage
results = {protocol: {traffic: {'latency': [], 'throughput': []} for traffic in traffic_types} for protocol in protocols}

# Baseline performance metrics
base_latency = {'IoT Low Priority': 20, 'IoT High Priority': 10, 'Autonomous Vehicle': 5}  # ms
base_throughput = {'IoT Low Priority': 50, 'IoT High Priority': 100, 'Autonomous Vehicle': 200}  # Mbps

# Simulation of protocol performance under varying network conditions
for condition in network_conditions:
    latency_factor, throughput_factor, signal_quality = condition

    for protocol in protocols:
        for traffic in traffic_types:
            # Adjust protocol performance based on network condition and traffic type
            if protocol == 'Protocol A':
                adjustment_factor = np.random.uniform(0.8, 1.2) - (0.1 * signal_quality)
            elif protocol == 'Protocol B':
                adjustment_factor = np.random.uniform(0.7, 1.3) - (0.2 * signal_quality)
            elif protocol == 'Protocol C':
                adjustment_factor = np.random.uniform(0.6, 1.4) - (0.3 * signal_quality)

            latency = base_latency[traffic] * latency_factor * adjustment_factor
            throughput = base_throughput[traffic] * throughput_factor * adjustment_factor

            results[protocol][traffic]['latency'].append(latency)
            results[protocol][traffic]['throughput'].append(throughput)

# Visualization of Results
fig, axs = plt.subplots(len(traffic_types), 2, figsize=(14, 12))

for i, traffic in enumerate(traffic_types):
    for protocol in protocols:
        axs[i, 0].plot(results[protocol][traffic]['latency'], label=protocol)
        axs[i, 1].plot(results[protocol][traffic]['throughput'], label=protocol)

    axs[i, 0].set_title(f'{traffic} - Latency')
    axs[i, 0].set_xlabel('Time Interval')
    axs[i, 0].set_ylabel('Latency (ms)')
    axs[i, 0].legend()

    axs[i, 1].set_title(f'{traffic} - Throughput')
    axs[i, 1].set_xlabel('Time Interval')
    axs[i, 1].set_ylabel('Throughput (Mbps)')
    axs[i, 1].legend()

plt.tight_layout()
plt.show()

